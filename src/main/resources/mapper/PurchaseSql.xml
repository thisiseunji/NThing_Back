<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="data.mapper.PurchaseMapper">

    <insert id="createPurchase" parameterType="data.dto.PurchaseDto$Request" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO nthing.purchase
        (
            title,
            description,
            latitude,
            longitude,
            date,
            denominator,
            numerator,
            price,
            place,
            status,
            created_at,
            manager_id,
            category_id
        )
        VALUES
            (
                #{title},
                #{description},
                #{latitude},
                #{longitude},
                #{date},
                #{denominator},
                #{numerator},
                #{price},
                #{place},
                0,
                now(),
                #{manager_id},
                #{category_id}
            )
    </insert>

    <!-- 첫 번째 쿼리: 위치 설정 -->
    <select id="setLocation" parameterType="map">
        SET @location = POINT(#{longitude}, #{latitude})
    </select>

    <!-- 두 번째 쿼리: 데이터 조회 -->
    <select id="findAllPurchase" resultType="data.dto.PurchaseDto$Summary" parameterType="map">
        SELECT
            p.id,
            p.title,
            p.latitude,
            p.longitude,
            p.date,
            p.denominator,
            p.numerator,
            p.price,
            p.place,
            p.status,
            (
                SELECT COUNT(*)
                FROM nthing.like b
                WHERE true
                AND b.user_id = #{userId}
                AND b.purchase_id = p.id
            ) AS is_liked,
            (
                SELECT save_name
                FROM nthing.purchase_file
                WHERE true
                    AND purchase_id = p.id
                    AND delete_yn = false
                ORDER BY id
                LIMIT 1
            ) AS image,
            ST_Distance_Sphere(@location, POINT(p.longitude, p.latitude)) AS distance
        FROM nthing.purchase AS p
        WHERE true
            AND p.delete_yn = 0
            AND <![CDATA[ST_Distance_Sphere(@location, POINT(p.longitude, p.latitude)) <= #{radius}]]>
            <if test="search_keyword != null and search_keyword != ''">
                AND (p.title LIKE CONCAT('%', #{search_keyword}, '%') OR p.description LIKE CONCAT('%', #{search_keyword}, '%'))
            </if>
            <if test="status == true">
                AND p.status = false
            </if>
            <choose>
                <when test="sort != null and sort != ''">
                    ORDER BY ${sort}
                </when>
                <otherwise>
                    ORDER BY -p.created_at
                </otherwise>
            </choose>
    </select>

    <select id="findPurchaseById" resultType="data.dto.PurchaseDto$Detail" parameterType="map">
        SELECT
            a.id,
            a.title,
            a.description,
            a.latitude,
            a.longitude,
            a.date,
            a.denominator,
            a.numerator,
            a.status,
            a.price,
            a.place,
            a.created_at,
            a.updated_at,
            d.nickname AS manager,
            a.category_id,
            c.name AS category_name,
            (
                SELECT COUNT(*)
                FROM nthing.like b
                WHERE true
                    AND b.user_id = #{user_id}
                    AND b.purchase_id = #{id}
            ) AS is_liked,
            (
                SELECT COUNT(*)
                FROM nthing.purchase p
                WHERE true
                    AND p.id = #{id}
                    AND p.manager_id = #{user_id}
            ) AS is_manager
        FROM
            nthing.purchase AS a
                LEFT JOIN category c ON a.category_id = c.id
                LEFT JOIN user d ON a.manager_id = d.id
        WHERE
            a.id = #{id}
            AND a.delete_yn = 0
    </select>

    <select id="findPurchaseByIdAndUserId" resultType="boolean" parameterType="map">
        SELECT COUNT(*) > 0 AS isExist
        FROM nthing.purchase
        WHERE id = #{id}
            AND manager_id = #{user_id}
            AND delete_yn = 0
    </select>

    <update id="updatePurchase" parameterType="data.dto.PurchaseDto$Request" useGeneratedKeys="true" keyProperty="id">
        UPDATE purchase
        SET title = #{title},
            description = #{description},
            latitude = #{latitude},
            longitude = #{longitude},
            date = #{date},
            denominator = #{denominator},
            numerator = #{numerator},
            status = #{status},
            price = #{price},
            place = #{place},
            updated_at = NOW(),
            category_id = #{category_id}
        WHERE
            id = #{id}
    </update>

    <update id="joinPurchase" parameterType="map">
        update purchase
        <set>
            numerator = #{numerator}
        </set>
        <trim prefix="where" prefixOverrides="and">
            and delete_yn = 0
            and id = #{id}
        </trim>
    </update>

    <delete id="deletePurchase" parameterType="int">
        UPDATE nthing.purchase
        SET delete_yn = 1,
            deleted_at = NOW()
        WHERE id = #{id}
    </delete>

</mapper>